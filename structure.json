{
  "app": {
    "continents.ts": "const America = [\"CO\", \"CW\", \"GF\", \"GD\", \"SX\", \"AR\", \"TC\", \"DM\", \"UM\", \"CR\", \"HT\", \"BB\", \"HN\", \"PR\", \"FK\", \"KN\", \"LC\", \"BQ\", \"BO\", \"CL\", \"US\", \"GP\", \"MX\", \"VC\", \"BM\", \"DO\", \"GT\", \"EC\", \"MQ\", \"SR\", \"BL\", \"BS\", \"PY\", \"VG\", \"BR\", \"BZ\", \"VE\", \"SV\", \"PE\", \"TT\", \"GL\", \"GY\", \"JM\", \"AW\", \"KY\", \"CU\", \"UY\", \"MF\", \"AG\", \"CA\", \"PA\", \"MS\", \"NI\", \"PM\", \"VI\", \"AI\"]\r\nconst Europe = [\"NO\", \"GR\", \"AX\", \"CH\", \"HR\", \"IS\", \"LU\", \"HU\", \"NL\", \"LT\", \"SK\", \"LI\", \"MD\", \"IT\", \"JE\", \"MC\", \"BY\", \"LV\", \"AD\", \"FR\", \"GI\", \"DK\", \"MK\", \"MT\", \"CZ\", \"GG\", \"XK\", \"SJ\", \"ME\", \"FO\", \"AL\", \"RS\", \"UA\", \"IM\", \"EE\", \"RO\", \"BG\", \"DE\", \"PL\", \"GB\", \"FI\", \"SE\", \"VA\", \"RU\", \"AT\", \"CY\", \"PT\", \"BA\", \"BE\", \"ES\", \"SI\", \"SM\", \"IE\", \"UK\", \"TR\"]\r\nconst Asia = [\"KR\", \"TW\", \"JO\", \"NP\", \"TH\", \"KZ\", \"GE\", \"PK\", \"AM\", \"ID\", \"JP\", \"LA\", \"LB\", \"PH\", \"BH\", \"QA\", \"TJ\", \"CN\", \"YE\", \"IN\", \"KW\", \"SY\", \"MV\", \"UZ\", \"IR\", \"MM\", \"LK\", \"BT\", \"PS\", \"BD\", \"SG\", \"TR\", \"AE\", \"AF\", \"TL\", \"VN\", \"KH\", \"IQ\", \"BN\", \"KG\", \"AZ\", \"HK\", \"MY\", \"MN\", \"SA\", \"TM\", \"KP\", \"IL\", \"OM\", \"MO\"]\r\nconst Africa = [\"LS\", \"CF\", \"MA\", \"SL\", \"BF\", \"ER\", \"TZ\", \"DZ\", \"MR\", \"SD\", \"EH\", \"AO\", \"CI\", \"TN\", \"ML\", \"BJ\", \"CV\", \"GQ\", \"UG\", \"BW\", \"BI\", \"ZA\", \"LY\", \"YT\", \"GA\", \"CM\", \"GN\", \"SC\", \"IO\", \"MG\", \"CD\", \"GM\", \"SO\", \"NG\", \"SS\", \"SZ\", \"EG\", \"SH\", \"SN\", \"TG\", \"KE\", \"RW\", \"NA\", \"LR\", \"ZM\", \"NE\", \"KM\", \"GW\", \"GH\", \"TD\", \"ZW\", \"RE\", \"ST\", \"MW\", \"ET\", \"CG\", \"DJ\", \"MU\", \"MZ\"]\r\nconst Oceania = [\"NC\", \"SB\", \"MH\", \"VU\", \"NU\", \"NR\", \"CC\", \"FJ\", \"WF\", \"CK\", \"AU\", \"TV\", \"PN\", \"CX\", \"GU\", \"TO\", \"TK\", \"WS\", \"KI\", \"PF\", \"PG\", \"PW\", \"AS\", \"MP\", \"NF\", \"NZ\", \"FM\"]\r\n\r\nexport function getCountryContinent(countryCode: string): string[] {\r\n\tif (America.includes(countryCode)) return America.filter(code => code !== countryCode)\r\n\tif (Europe.includes(countryCode)) return Europe.filter(code => code !== countryCode)\r\n\tif (Asia.includes(countryCode)) return Asia.filter(code => code !== countryCode)\r\n\tif (Africa.includes(countryCode)) return Africa.filter(code => code !== countryCode)\r\n\tif (Oceania.includes(countryCode)) return Oceania.filter(code => code !== countryCode)\r\n\treturn []\r\n}",
    "globals.css": "@tailwind base;\r\n@tailwind components;\r\n@tailwind utilities;",
    "layout.tsx": "import \"./globals.css\"\r\nimport type { Metadata } from \"next\"\r\nimport { Inter } from \"next/font/google\"\r\nimport { ThemeProvider } from \"@/components/theme-provider\"\r\nimport { ThemeSwitcher } from \"@/components/theme-switcher\"\r\nimport KoFi from \"@/components/ko-fi\"\r\n\r\nconst inter = Inter({ subsets: [\"latin\"] })\r\n\r\nexport const metadata: Metadata = {\r\n\ttitle: \"Soundmap Artist Guesser\",\r\n\tdescription: \"soundmap user: VXN.\",\r\n\t\r\n}\r\n\r\nexport default function RootLayout({\r\n\tchildren,\r\n}: {\r\n\tchildren: React.ReactNode\r\n}) {\r\n\treturn (\r\n\t\t<html lang=\"en\" suppressHydrationWarning>\r\n\t\t\t<head>\r\n\t\t\t\t<link rel=\"icon\" href=\"/image.svg\" sizes=\"any\" />\r\n\t\t\t</head>\r\n\t\t\t<body className={inter.className}>\r\n\t\t\t\t<ThemeProvider attribute=\"class\" defaultTheme=\"system\" enableSystem>\r\n\t\t\t\t\t{children}\r\n\t\t\t\t\t<ThemeSwitcher />\r\n\t\t\t\t</ThemeProvider>\r\n\t\t\t<KoFi />\r\n\t\t\t</body>\r\n\t\t</html>\r\n\t)\r\n}\r\n\r\n",
    "page.tsx": "\"use client\"\r\n\r\nimport { useEffect, useState } from \"react\"\r\nimport { QueryClient, QueryClientProvider } from \"@tanstack/react-query\"\r\nimport { ArtistFinder } from \"@/components/ArtistFinder\"\r\n\r\nexport default function Page() {\r\n\tconst [isDomLoaded, setIsDomLoaded] = useState(false);\r\n\tconst queryClient = new QueryClient()\r\n\r\n\tuseEffect(() => {\r\n\t\tsetIsDomLoaded(true);\r\n\t}, []);\r\n\r\n\treturn (\r\n\t\tisDomLoaded && (\r\n\t\t\t<QueryClientProvider client={queryClient}>\r\n\t\t\t\t<ArtistFinder />\r\n\t\t\t</QueryClientProvider>\r\n\t\t)\r\n\t);\r\n}"
  },
  "components": {
    "ArtistFinder.tsx": "import { useState, useEffect } from \"react\"\r\nimport type { Genre } from \"@/lib/supabase\"\r\nimport { useArtistSearch } from \"@/hooks/useArtistSearch\"\r\nimport { FilterSection } from \"./FilterSection\"\r\nimport { ResultsSection } from \"./ResultsSection\"\r\nimport { ClearSearchButton } from \"./ClearSearchButton\"\r\nimport { genres } from \"@/lib/supabase\"\r\nimport { Avatar, AvatarImage, AvatarFallback } from \"@radix-ui/react-avatar\"\r\n\r\nexport function ArtistFinder() {\r\n\tconst [selectedGenres, setSelectedGenres] = useState<Genre[]>([genres[0]])\r\n\tconst { filters, setFilters, matchStatus, setMatchStatus, artists, isLoading, clearSearch, setSelectedGenre } =\r\n\t\tuseArtistSearch(selectedGenres[0])\r\n\r\n\tuseEffect(() => {\r\n\t\tif (selectedGenres.length > 0) {\r\n\t\t\tsetSelectedGenre(selectedGenres[0])\r\n\t\t}\r\n\t}, [selectedGenres, setSelectedGenre])\r\n\r\n\tconst handleClearSearch = () => {\r\n\t\tclearSearch()\r\n\t\tsetSelectedGenres([genres[0]])\r\n\t}\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<div className=\"min-h-screen bg-background text-foreground p-8 mb-16 lg:mb-0 md:mb-0\">\r\n\t\t\t\t<div className=\"max-w-4xl mx-auto\">\r\n\t\t\t\t\t<div className=\"flex items-center justify-center mb-8 gap-x-2\">\r\n\t\t\t\t\t\t<Avatar className=\"rounded-none w-10 h-10\">\r\n\t\t\t\t\t\t\t<AvatarImage src=\"/image.svg\" alt=\"soundmap\" />\r\n\t\t\t\t\t\t\t<AvatarFallback>soundmap</AvatarFallback>\r\n\t\t\t\t\t\t</Avatar>\r\n\t\t\t\t\t\t<h1 className=\"text-3xl font-bold\">SoundMap Artist Finder</h1>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<FilterSection\r\n\t\t\t\t\t\tfilters={filters}\r\n\t\t\t\t\t\tsetFilters={setFilters}\r\n\t\t\t\t\t\tmatchStatus={matchStatus}\r\n\t\t\t\t\t\tsetMatchStatus={setMatchStatus}\r\n\t\t\t\t\t\tselectedGenres={selectedGenres}\r\n\t\t\t\t\t\tsetSelectedGenres={setSelectedGenres}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<ResultsSection artists={artists} isLoading={isLoading} />\r\n\t\t\t\t\t<ClearSearchButton onClear={handleClearSearch} />\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</>\r\n\t)\r\n}\r\n",
    "ClearSearchButton.tsx": "import { Button } from \"@/components/ui/button\"\r\n\r\ntype ClearSearchButtonProps = {\r\n  onClear: () => void\r\n}\r\n\r\nexport function ClearSearchButton({ onClear }: ClearSearchButtonProps) {\r\n  return (\r\n    <div className=\"mt-8 text-center\">\r\n      <Button onClick={onClear} variant=\"outline\">\r\n        Clear Search\r\n      </Button>\r\n    </div>\r\n  )\r\n}\r\n\r\n",
    "ControlButtons.tsx": "import { Button } from \"@/components/ui/button\"\nimport { ArrowUpDown, Columns, Columns2 } from 'lucide-react'\n\ntype ControlButtonsProps = {\n  sortOrder: \"asc\" | \"desc\"\n  onSortOrderChange: (order: \"asc\" | \"desc\") => void\n  columnCount: 1 | 2\n  onColumnCountChange: (count: 1 | 2) => void\n}\n\nexport function ControlButtons({\n  sortOrder,\n  onSortOrderChange,\n  columnCount,\n  onColumnCountChange,\n}: ControlButtonsProps) {\n  return (\n    <div className=\"flex justify-between items-center mb-4\">\n      <Button\n        variant=\"outline\"\n        onClick={() => onSortOrderChange(sortOrder === \"asc\" ? \"desc\" : \"asc\")}\n        aria-label={`Sort ${sortOrder === \"asc\" ? \"descending\" : \"ascending\"}`}\n      >\n        <ArrowUpDown className=\"mr-2 h-4 w-4\" />\n        Sort {sortOrder === \"asc\" ? \"Descending\" : \"Ascending\"}\n      </Button>\n      <div className=\"space-x-2\">\n        <Button\n          variant={columnCount === 1 ? \"default\" : \"outline\"}\n          onClick={() => onColumnCountChange(1)}\n          aria-label=\"Show 1 column\"\n        >\n          <Columns className=\"h-4 w-4 rotate-90\" />\n        </Button>\n        <Button\n          variant={columnCount === 2 ? \"default\" : \"outline\"}\n          onClick={() => onColumnCountChange(2)}\n          aria-label=\"Show 2 columns\"\n        >\n          <Columns2 className=\"h-4 w-4\" />\n        </Button>\n      </div>\n    </div>\n  )\n}\n",
    "FilterField.tsx": "import { useState } from \"react\"\r\nimport type { Dispatch, SetStateAction } from \"react\"\r\nimport { Card } from \"@/components/ui/card\"\r\nimport { Input } from \"@/components/ui/input\"\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\r\nimport { Button } from \"@/components/ui/button\"\r\nimport { Switch } from \"@/components/ui/switch\"\r\nimport { CheckIcon, CircleIcon } from \"lucide-react\"\r\nimport { useCountrySearch } from \"@/hooks/useCountrySearch\"\r\n\r\ntype FilterFieldProps = {\r\n\tfield: keyof FilterFieldProps[\"filters\"]\r\n\tfilters: {\r\n\t\tdebut: string\r\n\t\tdebutMin?: string\r\n\t\tdebutMax?: string\r\n\t\tgender: string\r\n\t\tmembers: string\r\n\t\tcountry: string\r\n\t\tpopularity: string\r\n\t\tpopularityMin?: string\r\n\t\tpopularityMax?: string\r\n\t}\r\n\tsetFilters: Dispatch<\r\n\t\tSetStateAction<{\r\n\t\t\tdebut: string\r\n\t\t\tdebutMin?: string\r\n\t\t\tdebutMax?: string\r\n\t\t\tgender: string\r\n\t\t\tmembers: string\r\n\t\t\tcountry: string\r\n\t\t\tpopularity: string\r\n\t\t\tpopularityMin?: string\r\n\t\t\tpopularityMax?: string\r\n\t\t}>\r\n\t>\r\n\tmatchStatus: {\r\n\t\tdebut: string\r\n\t\tdebutMin?: string\r\n\t\tdebutMax?: string\r\n\t\tgender: string\r\n\t\tmembers: string\r\n\t\tcountry: string\r\n\t\tpopularity: string\r\n\t\tpopularityMin?: string\r\n\t\tpopularityMax?: string\r\n\t}\r\n\tsetMatchStatus: Dispatch<\r\n\t\tSetStateAction<{\r\n\t\t\tdebut: string\r\n\t\t\tdebutMin?: string\r\n\t\t\tdebutMax?: string\r\n\t\t\tgender: string\r\n\t\t\tmembers: string\r\n\t\t\tcountry: string\r\n\t\t\tpopularity: string\r\n\t\t\tpopularityMin?: string\r\n\t\t\tpopularityMax?: string\r\n\t\t}>\r\n\t>\r\n}\r\n\r\nexport function FilterField({ field, filters, setFilters, matchStatus, setMatchStatus }: FilterFieldProps) {\r\n\tconst { distinctCountries, countrySearchTerm, setCountrySearchTerm } = useCountrySearch()\r\n\tconst [isRangeMode, setIsRangeMode] = useState(false)\r\n\r\n\tconst getInputStyle = (field: keyof typeof matchStatus) => {\r\n\t\tswitch (matchStatus[field]) {\r\n\t\t\tcase \"correct\":\r\n\t\t\t\treturn \"bg-green-900 border-green-500 text-white\"\r\n\t\t\tcase \"higher\":\r\n\t\t\tcase \"lower\":\r\n\t\t\t\treturn \"bg-yellow-900 border-yellow-500 text-white\"\r\n\t\t\tcase \"continent\":\r\n\t\t\t\treturn \"bg-yellow-900 border-yellow-500 text-white\"\r\n\t\t\tdefault:\r\n\t\t\t\treturn \"bg-input  dark:bg-input-dark \"\r\n\t\t}\r\n\t}\r\n\r\n\tconst renderField = () => {\r\n\t\tif (field === \"country\" && distinctCountries?.length) {\r\n\t\t\treturn (\r\n\t\t\t\t<Select\r\n\t\t\t\t\tvalue={filters[field] || undefined}\r\n\t\t\t\t\tonValueChange={(value) => {\r\n\t\t\t\t\t\tsetFilters({ ...filters, [field]: value })\r\n\t\t\t\t\t\tif (field === 'country') {\r\n\t\t\t\t\t\t\tsetMatchStatus({ ...matchStatus, [field]: 'correct' })\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}}\r\n\t\t\t\t>\r\n\t\t\t\t\t<SelectTrigger className={`bg-input  dark:bg-input-dark  ${getInputStyle(field)}`}>\r\n\t\t\t\t\t\t<SelectValue placeholder=\"Select country\" />\r\n\t\t\t\t\t</SelectTrigger>\r\n\t\t\t\t\t<SelectContent className=\"bg-gray-700 py-2 dark:bg-gray-800 max-h-60\">\r\n\t\t\t\t\t\t<div className=\"p-2\">\r\n\t\t\t\t\t\t\t<Input\r\n\t\t\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\t\t\tplaceholder=\"Search countries...\"\r\n\t\t\t\t\t\t\t\tvalue={countrySearchTerm}\r\n\t\t\t\t\t\t\t\tonChange={(e) => setCountrySearchTerm(e.target.value)}\r\n\t\t\t\t\t\t\t\tclassName=\"mb-2\"\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t{distinctCountries\r\n\t\t\t\t\t\t\t.filter((item) => item.country && item.country.toLowerCase().includes(countrySearchTerm.toLowerCase()))\r\n\t\t\t\t\t\t\t.map(\r\n\t\t\t\t\t\t\t\t(item) =>\r\n\t\t\t\t\t\t\t\t\titem.country && (\r\n\t\t\t\t\t\t\t\t\t\t<SelectItem key={item.country} value={item.country}>\r\n\t\t\t\t\t\t\t\t\t\t\t{item.country}\r\n\t\t\t\t\t\t\t\t\t\t</SelectItem>\r\n\t\t\t\t\t\t\t\t\t),\r\n\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t</SelectContent>\r\n\t\t\t\t</Select>\r\n\t\t\t)\r\n\t\t}\r\n\r\n\t\tif (field === \"gender\") {\r\n\t\t\treturn (\r\n\t\t\t\t<Select\r\n\t\t\t\t\tvalue={filters[field] || undefined}\r\n\t\t\t\t\tonValueChange={(value) => {\r\n\t\t\t\t\t\tsetFilters({ ...filters, [field]: value })\r\n\t\t\t\t\t\tif (field === 'gender') {\r\n\t\t\t\t\t\t\tsetMatchStatus({ ...matchStatus, [field]: 'correct' })\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}}\r\n\t\t\t\t>\r\n\t\t\t\t\t<SelectTrigger className={`bg-input  dark:bg-input-dark  ${getInputStyle(field)}`}>\r\n\t\t\t\t\t\t<SelectValue placeholder=\"Select gender\" />\r\n\t\t\t\t\t</SelectTrigger>\r\n\t\t\t\t\t<SelectContent className=\"bg-gray-700 py-2 dark:bg-gray-800\">\r\n\t\t\t\t\t\t{[\"Female\", \"Male\", \"Mixed\"].map((gender) => (\r\n\t\t\t\t\t\t\t<SelectItem key={gender} value={gender}>\r\n\t\t\t\t\t\t\t\t{gender}\r\n\t\t\t\t\t\t\t</SelectItem>\r\n\t\t\t\t\t\t))}\r\n\t\t\t\t\t</SelectContent>\r\n\t\t\t\t</Select>\r\n\t\t\t)\r\n\t\t}\r\n\r\n\t\tif (field === \"members\") {\r\n\t\t\treturn (\r\n\t\t\t\t<Select\r\n\t\t\t\t\tvalue={filters[field] || undefined}\r\n\t\t\t\t\tonValueChange={(value) => setFilters({ ...filters, [field]: value })}\r\n\t\t\t\t>\r\n\t\t\t\t\t<SelectTrigger className={`bg-input  dark:bg-input-dark  ${getInputStyle(field)}`}>\r\n\t\t\t\t\t\t<SelectValue placeholder=\"Select type\" />\r\n\t\t\t\t\t</SelectTrigger>\r\n\t\t\t\t\t<SelectContent className=\"bg-gray-700 py-2 dark:bg-gray-800\">\r\n\t\t\t\t\t\t{[\"Solo\", \"Group\"].map((type) => (\r\n\t\t\t\t\t\t\t<SelectItem key={type} value={type}>\r\n\t\t\t\t\t\t\t\t{type}\r\n\t\t\t\t\t\t\t</SelectItem>\r\n\t\t\t\t\t\t))}\r\n\t\t\t\t\t</SelectContent>\r\n\t\t\t\t</Select>\r\n\t\t\t)\r\n\t\t}\r\n\r\n\t\tif (field === \"debut\" || field === \"popularity\") {\r\n\t\t\tif (isRangeMode) {\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<div className=\"flex space-x-2\">\r\n\t\t\t\t\t\t<Input\r\n\t\t\t\t\t\t\ttype=\"number\"\r\n\t\t\t\t\t\t\tplaceholder=\"Min\"\r\n\t\t\t\t\t\t\tclassName=\"flex-1\"\r\n\t\t\t\t\t\t\tvalue={filters[`${field}Min`] || \"\"}\r\n\t\t\t\t\t\t\tonChange={(e) => setFilters((prev) => ({ ...prev, [`${field}Min`]: e.target.value }))}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t<Input\r\n\t\t\t\t\t\t\ttype=\"number\"\r\n\t\t\t\t\t\t\tplaceholder=\"Max\"\r\n\t\t\t\t\t\t\tclassName=\"flex-1\"\r\n\t\t\t\t\t\t\tvalue={filters[`${field}Max`] || \"\"}\r\n\t\t\t\t\t\t\tonChange={(e) => setFilters((prev) => ({ ...prev, [`${field}Max`]: e.target.value }))}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t)\r\n\t\t\t} else {\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<Input\r\n\t\t\t\t\t\ttype=\"number\"\r\n\t\t\t\t\t\tvalue={filters[field]}\r\n\t\t\t\t\t\tonChange={(e) => setFilters((prev) => ({ ...prev, [field]: e.target.value }))}\r\n\t\t\t\t\t\tclassName={`bg-input  dark:bg-input-dark  ${getInputStyle(field)}`}\r\n\t\t\t\t\t\tplaceholder={`Enter ${field}`}\r\n\t\t\t\t\t/>\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn null\r\n\t}\r\n\r\n\tconst renderStatusButtons = () => {\r\n\t\tconst setStatus = (status: string) => {\r\n\t\t\tsetMatchStatus((prev) => ({\r\n\t\t\t\t...prev,\r\n\t\t\t\t[field]: prev[field] === status ? \"none\" : status,\r\n\t\t\t}))\r\n\t\t}\r\n\r\n\t\tif (field === \"country\") {\r\n\t\t\treturn (\r\n\t\t\t\t<div className=\"flex space-x-2\">\r\n\t\t\t\t\t<Button\r\n\t\t\t\t\t\tvariant=\"ghost\"\r\n\t\t\t\t\t\tsize=\"sm\"\r\n\t\t\t\t\t\tonClick={() => setStatus(\"correct\")}\r\n\t\t\t\t\t\tclassName={`flex-1 h-8 ${matchStatus[field] === \"correct\" ? \"bg-green-600 hover:bg-green-700\" : \"hover:bg-gray-700\"}`}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<CheckIcon className=\"w-4 h-4 text-white\" />\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t\t<Button\r\n\t\t\t\t\t\tvariant=\"ghost\"\r\n\t\t\t\t\t\tsize=\"sm\"\r\n\t\t\t\t\t\tonClick={() => setStatus(\"continent\")}\r\n\t\t\t\t\t\tclassName={`flex-1 h-8 ${matchStatus[field] === \"continent\" ? \"bg-yellow-600 hover:bg-yellow-700\" : \"hover:bg-gray-700\"}`}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<CircleIcon className=\"w-4 h-4 text-white\" />\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t</div>\r\n\t\t\t)\r\n\t\t}\r\n\r\n\t\tif (field === \"gender\" || field === \"members\") {\r\n\t\t\treturn (\r\n\t\t\t\t<div className=\"flex space-x-2\">\r\n\t\t\t\t\t<Button\r\n\t\t\t\t\t\tvariant=\"ghost\"\r\n\t\t\t\t\t\tsize=\"sm\"\r\n\t\t\t\t\t\tonClick={() => setStatus(\"correct\")}\r\n\t\t\t\t\t\tclassName={`flex-1 h-8 ${matchStatus[field] === \"correct\" ? \"bg-green-600 hover:bg-green-700\" : \"hover:bg-gray-700\"}`}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<CheckIcon className=\"w-4 h-4 text-white\" />\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t</div>\r\n\t\t\t)\r\n\t\t}\r\n\r\n\t\tif (field === \"debut\" || field === \"popularity\") {\r\n\t\t\tif (!isRangeMode) {\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<div className=\"flex space-x-2\">\r\n\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\tvariant=\"ghost\"\r\n\t\t\t\t\t\t\tsize=\"sm\"\r\n\t\t\t\t\t\t\tonClick={() => setStatus(\"correct\")}\r\n\t\t\t\t\t\t\tclassName={`flex-1 h-8 ${matchStatus[field] === \"correct\" ? \"bg-green-600 hover:bg-green-700\" : \"hover:bg-gray-700\"}`}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<CheckIcon className=\"w-4 h-4 text-white\" />\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\tvariant=\"ghost\"\r\n\t\t\t\t\t\t\tsize=\"sm\"\r\n\t\t\t\t\t\t\tonClick={() => setStatus(\"lower\")}\r\n\t\t\t\t\t\t\tclassName={`flex-1 h-8 text-white hover:text-white ${matchStatus[field] === \"lower\" ? \"bg-yellow-600 hover:bg-yellow-700\" : \"hover:bg-gray-700\"}`}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t{field === \"debut\" ? \"Before\" : \"Lower\"}\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\tvariant=\"ghost\"\r\n\t\t\t\t\t\t\tsize=\"sm\"\r\n\t\t\t\t\t\t\tonClick={() => setStatus(\"higher\")}\r\n\t\t\t\t\t\t\tclassName={`flex-1 h-8 text-white hover:text-white ${matchStatus[field] === \"higher\" ? \"bg-yellow-600 hover:bg-yellow-700\" : \"hover:bg-gray-700\"}`}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t{field === \"debut\" ? \"After\" : \"Higher\"}\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn null\r\n\t}\r\n\r\n\treturn (\r\n\t\t<Card className=\"p-4 bg-card text-card-foreground\">\r\n\t\t\t<div className=\"flex flex-col space-y-2\">\r\n\t\t\t\t<div className=\"flex justify-between items-center\">\r\n\t\t\t\t\t<label className=\"text-sm font-medium capitalize justify-start\">{field}</label>\r\n\t\t\t\t\t{(field === \"debut\" || field === \"popularity\") && (\r\n\t\t\t\t\t\t<div className=\"flex gap-x-2\">\r\n\t\t\t\t\t\t\t<label className=\"text-sm font-medium capitalize justify-end\">Range</label>\r\n\t\t\t\t\t\t\t<Switch\r\n\t\t\t\t\t\t\t\tchecked={isRangeMode}\r\n\t\t\t\t\t\t\t\tonCheckedChange={setIsRangeMode}\r\n\t\t\t\t\t\t\t\taria-label=\"Toggle range mode\"\r\n\t\t\t\t\t\t\t\tclassName=\"bg-gray-600 data-[state=checked]:bg-green-600 data-[state=unchecked]:bg-red-600 [&>span]:bg-white\"\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t)}\r\n\t\t\t\t</div>\r\n\t\t\t\t{renderField()}\r\n\t\t\t\t{renderStatusButtons()}\r\n\t\t\t</div>\r\n\t\t</Card>\r\n\t)\r\n}\r\n\r\n",
    "FilterSection.tsx": "import type { Dispatch, SetStateAction } from \"react\"\r\nimport { Card } from \"@/components/ui/card\"\r\nimport { genres, type Genre } from \"@/lib/supabase\"\r\nimport { FilterField } from \"./FilterField\"\r\nimport { GenreSelect } from \"./GenreSelect\"\r\n\r\ntype FilterSectionProps = {\r\n\tfilters: {\r\n\t\tdebut: string\r\n\t\tgender: string\r\n\t\tmembers: string\r\n\t\tcountry: string\r\n\t\tpopularity: string\r\n\t}\r\n\tsetFilters: Dispatch<\r\n\t\tSetStateAction<{\r\n\t\t\tdebut: string\r\n\t\t\tgender: string\r\n\t\t\tmembers: string\r\n\t\t\tcountry: string\r\n\t\t\tpopularity: string\r\n\t\t}>\r\n\t>\r\n\tmatchStatus: {\r\n\t\tdebut: string\r\n\t\tgender: string\r\n\t\tmembers: string\r\n\t\tcountry: string\r\n\t\tpopularity: string\r\n\t}\r\n\tsetMatchStatus: Dispatch<\r\n\t\tSetStateAction<{\r\n\t\t\tdebut: string\r\n\t\t\tgender: string\r\n\t\t\tmembers: string\r\n\t\t\tcountry: string\r\n\t\t\tpopularity: string\r\n\t\t}>\r\n\t>\r\n\tselectedGenres: Genre[]\r\n\tsetSelectedGenres: (genres: Genre[]) => void\r\n}\r\n\r\nexport function FilterSection({\r\n\tfilters,\r\n\tsetFilters,\r\n\tmatchStatus,\r\n\tsetMatchStatus,\r\n\tselectedGenres,\r\n\tsetSelectedGenres,\r\n}: FilterSectionProps) {\r\n\treturn (\r\n\t\t<div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 mb-4\">\r\n\t\t\t{([\"debut\", \"popularity\", \"members\"] as const).map((field) => (\r\n\t\t\t\t<FilterField\r\n\t\t\t\t\tkey={field}\r\n\t\t\t\t\tfield={field}\r\n\t\t\t\t\tfilters={filters}\r\n\t\t\t\t\tsetFilters={setFilters}\r\n\t\t\t\t\tmatchStatus={matchStatus}\r\n\t\t\t\t\tsetMatchStatus={setMatchStatus}\r\n\t\t\t\t/>\r\n\t\t\t))}\r\n\t\t\t<Card className=\"p-4 bg-card text-card-foreground dark:bg-card-dark dark:text-card-foreground-dark\">\r\n\t\t\t\t<GenreSelect selectedGenres={selectedGenres} setSelectedGenres={setSelectedGenres} genres={genres} />\r\n\t\t\t</Card>\r\n\t\t\t{([\"country\", \"gender\"] as const).map((field) => (\r\n\t\t\t\t<FilterField\r\n\t\t\t\t\tkey={field}\r\n\t\t\t\t\tfield={field}\r\n\t\t\t\t\tfilters={filters}\r\n\t\t\t\t\tsetFilters={setFilters}\r\n\t\t\t\t\tmatchStatus={matchStatus}\r\n\t\t\t\t\tsetMatchStatus={setMatchStatus}\r\n\t\t\t\t/>\r\n\t\t\t))}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\n",
    "GenreSelect.tsx": "import { useState } from \"react\"\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\r\nimport { Switch } from \"@/components/ui/switch\"\r\nimport { Checkbox } from \"@/components/ui/checkbox\"\r\nimport { Label } from \"@/components/ui/label\"\r\nimport { ScrollArea } from \"@/components/ui/scroll-area\"\r\nimport type { Genre } from \"@/lib/supabase\"\r\n\r\ntype GenreSelectProps = {\r\n\tselectedGenres: Genre[]\r\n\tsetSelectedGenres: (genres: Genre[]) => void\r\n\tgenres: readonly Genre[]\r\n}\r\n\r\nexport function GenreSelect({ selectedGenres, setSelectedGenres, genres }: GenreSelectProps) {\r\n\tconst [isMultiSelect, setIsMultiSelect] = useState(false)\r\n\r\n\tconst handleGenreChange = (genre: Genre) => {\r\n\t\tif (selectedGenres.includes(genre)) {\r\n\t\t\tsetSelectedGenres(selectedGenres.filter((g) => g !== genre))\r\n\t\t} else {\r\n\t\t\tsetSelectedGenres([...selectedGenres, genre])\r\n\t\t}\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className=\"space-y-2\">\r\n\t\t\t<div className=\"flex items-center justify-between\">\r\n\t\t\t\t<Label htmlFor=\"genre-select\">Genre</Label>\r\n\t\t\t\t<div className=\"flex items-center space-x-2\">\r\n\t\t\t\t\t<Label htmlFor=\"multi-select-switch\" className=\"text-sm\">\r\n\t\t\t\t\t\tMulti-select\r\n\t\t\t\t\t</Label>\r\n\t\t\t\t\t<Switch \r\n\t\t\t\t\t\tid=\"multi-select-switch\" \r\n\t\t\t\t\t\tclassName=\"data-[state=checked]:bg-green-600 data-[state=unchecked]:bg-red-600 [&>span]:bg-white\" \r\n\t\t\t\t\t\tchecked={isMultiSelect} \r\n\t\t\t\t\t\tonCheckedChange={setIsMultiSelect} \r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<Select\r\n\t\t\t\tvalue={isMultiSelect ? undefined : selectedGenres[0]}\r\n\t\t\t\tonValueChange={(value) => !isMultiSelect && setSelectedGenres([value as Genre])}\r\n\t\t\t>\r\n\t\t\t\t<SelectTrigger id=\"genre-select\" className=\"bg-input  dark:bg-input-dark \">\r\n\t\t\t\t\t<SelectValue placeholder=\"Select genre\" />\r\n\t\t\t\t</SelectTrigger>\r\n\t\t\t\t<SelectContent>\r\n\t\t\t\t\t<ScrollArea className=\"h-[200px] bg-input  dark:bg-input-dark \">\r\n\t\t\t\t\t\t{isMultiSelect\r\n\t\t\t\t\t\t\t? genres.map((genre) => (\r\n\t\t\t\t\t\t\t\t<div key={genre} className=\"flex items-center space-x-2 p-2\">\r\n\t\t\t\t\t\t\t\t\t<Checkbox\r\n\t\t\t\t\t\t\t\t\t\tid={genre}\r\n\t\t\t\t\t\t\t\t\t\tchecked={selectedGenres.includes(genre)}\r\n\t\t\t\t\t\t\t\t\t\tonCheckedChange={() => handleGenreChange(genre)}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t<Label htmlFor={genre}>{genre}</Label>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t))\r\n\t\t\t\t\t\t\t: genres.map((genre) => (\r\n\t\t\t\t\t\t\t\t<SelectItem key={genre} value={genre}>\r\n\t\t\t\t\t\t\t\t\t{genre}\r\n\t\t\t\t\t\t\t\t</SelectItem>\r\n\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t</ScrollArea>\r\n\t\t\t\t</SelectContent>\r\n\t\t\t</Select>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\n",
    "ko-fi.tsx": "export default function KoFi() {\r\n\treturn (\r\n\t\t<a title=\"Support me on ko-fi.com\" className=\"bg-[#09364a] flex flex-row p-3 rounded-md gap-x-2 fixed bottom-4 left-4\" href=\"https://ko-fi.com/W7W4FSYG0\" target=\"_blank\">\r\n\t\t\t<img src=\"https://storage.ko-fi.com/cdn/cup-border.png\" alt=\"Ko-fi donations\" className=\"w-10\" />\r\n\t\t\t<span className=\"my-auto\">\r\n\t\t\t\tSupport me on Ko-fi\r\n\t\t\t</span>\r\n\t\t</a>\r\n\t)\t\r\n}",
    "ResultsSection.tsx": "\"use client\"\r\nimport { useState, useMemo } from \"react\"\r\nimport { Card } from \"@/components/ui/card\"\r\nimport type { Artist } from \"@/lib/supabase\"\r\nimport { Avatar, AvatarImage, AvatarFallback } from \"@/components/ui/avatar\"\r\nimport { ControlButtons } from \"./ControlButtons\"\r\n\r\ntype ResultsSectionProps = {\r\n\tartists: Artist[] | undefined\r\n\tisLoading: boolean\r\n}\r\n\r\nexport function ResultsSection({ artists, isLoading }: ResultsSectionProps) {\r\n\tconst [columnCount, setColumnCount] = useState<1 | 2>(2)\r\n\tconst [sortOrder, setSortOrder] = useState<\"asc\" | \"desc\">(\"desc\")\r\n\r\n\tconst sortedArtists = useMemo(() => {\r\n\t\tif (!artists) return []\r\n\t\treturn [...artists].sort((a, b) => {\r\n\t\t\tif (sortOrder === \"asc\") {\r\n\t\t\t\treturn a.popularity - b.popularity\r\n\t\t\t} else {\r\n\t\t\t\treturn b.popularity - a.popularity\r\n\t\t\t}\r\n\t\t})\r\n\t}, [artists, sortOrder])\r\n\r\n\treturn (\r\n\t\t<div className=\"mt-4\">\r\n\t\t\t<ControlButtons\r\n\t\t\t\tsortOrder={sortOrder}\r\n\t\t\t\tonSortOrderChange={setSortOrder}\r\n\t\t\t\tcolumnCount={columnCount}\r\n\t\t\t\tonColumnCountChange={setColumnCount}\r\n\t\t\t/>\r\n\t\t\t{isLoading ? (\r\n\t\t\t\t<p className=\"text-center text-muted-foreground\">Loading artists...</p>\r\n\t\t\t) : sortedArtists && sortedArtists.length > 0 ? (\r\n\t\t\t\t<div\r\n\t\t\t\t\tclassName={`grid gap-4 ${columnCount === 1\r\n\t\t\t\t\t\t\t? \"grid-cols-1\"\r\n\t\t\t\t\t\t\t: columnCount === 2\r\n\t\t\t\t\t\t\t\t? \"grid-cols-1 md:grid-cols-2\"\r\n\t\t\t\t\t\t\t\t: \"grid-cols-1 md:grid-cols-2 lg:grid-cols-3\"\r\n\t\t\t\t\t\t}`}\r\n\t\t\t\t>\r\n\t\t\t\t\t\t{columnCount === 2 ? (\r\n\t\t\t\t\t\t\tsortedArtists.map((artist) => (\r\n\t\t\t\t\t\t\t\t<Card\r\n\t\t\t\t\t\t\t\t\tkey={artist.id}\r\n\t\t\t\t\t\t\t\t\tclassName=\"p-4 bg-card text-card-foreground min-h-fit grid grid-cols-3 grid-rows-3 gap-y-4\"\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t<div className=\"col-span-3 flex flex-row justify-start gap-x-4 mx-5 my-auto\">\r\n\t\t\t\t\t\t\t\t\t\t<Avatar className=\"w-14 h-14 my-auto\">\r\n\t\t\t\t\t\t\t\t\t\t\t<AvatarImage\r\n\t\t\t\t\t\t\t\t\t\t\t\tsrc={artist.imageUrl}\r\n\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"rounded-full\"\r\n\t\t\t\t\t\t\t\t\t\t\t\talt={`${artist.name} photo`}\r\n\t\t\t\t\t\t\t\t\t\t\t\tloading=\"lazy\"\r\n\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t\t<AvatarFallback>{artist.name}</AvatarFallback>\r\n\t\t\t\t\t\t\t\t\t\t</Avatar>\r\n\t\t\t\t\t\t\t\t\t\t<h3 className=\"font-bold text-lg my-auto\">{artist.name}</h3>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t<div className=\"grid grid-cols-3 col-span-3 row-span-2 gap-2 [&>div]:bg-gray-700 [&>div]:text-lg\">\r\n\t\t\t\t\t\t\t\t\t\t<div className=\"row-start-1 flex flex-col rounded-sm p-1 align-middle\">\r\n\t\t\t\t\t\t\t\t\t\t\t<span className=\"mx-auto\">Debut</span>\r\n\t\t\t\t\t\t\t\t\t\t\t<span className=\"mx-auto\">{artist.debut}</span>\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t<div className=\"row-start-1 flex flex-col rounded-sm p-1\">\r\n\t\t\t\t\t\t\t\t\t\t\t<span className=\"mx-auto\">Popularity</span>\r\n\t\t\t\t\t\t\t\t\t\t\t<span className=\"mx-auto\">#{artist.popularity}</span>\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t<div className=\"row-start-1 flex flex-col rounded-sm p-1\">\r\n\t\t\t\t\t\t\t\t\t\t\t<span className=\"mx-auto\">Members</span>\r\n\t\t\t\t\t\t\t\t\t\t\t<span className=\"mx-auto\">{artist.members}</span>\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t<div className=\"row-start-2 col-start-2 flex flex-col rounded-sm p-1\">\r\n\t\t\t\t\t\t\t\t\t\t\t<span className=\"mx-auto\">Country</span>\r\n\t\t\t\t\t\t\t\t\t\t\t<span className=\"mx-auto\">{artist.country}</span>\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t<div className=\"row-start-2 col-start-3 flex flex-col rounded-sm p-1\">\r\n\t\t\t\t\t\t\t\t\t\t\t<span className=\"mx-auto\">Gender</span>\r\n\t\t\t\t\t\t\t\t\t\t\t<span className=\"mx-auto\">{artist.gender}</span>\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</Card>\r\n\t\t\t\t\t\t\t))\r\n\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\tsortedArtists.map((artist) => (\r\n\t\t\t\t\t\t\t\t<Card\r\n\t\t\t\t\t\t\t\t\tkey={artist.id}\r\n\t\t\t\t\t\t\t\t\tclassName=\"p-4 bg-card text-card-foreground grid grid-cols-4 grid-rows-2 gap-4\"\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t<div className=\"flex flex-col justify-center gap-x-4 mx-5 my-auto row-span-2 gap-y-2\">\r\n\t\t\t\t\t\t\t\t\t\t<Avatar className=\"w-16 h-16 my-auto mx-auto\">\r\n\t\t\t\t\t\t\t\t\t\t\t<AvatarImage\r\n\t\t\t\t\t\t\t\t\t\t\t\tsrc={artist.imageUrl}\r\n\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"rounded-full\"\r\n\t\t\t\t\t\t\t\t\t\t\t\talt={`${artist.name} photo`}\r\n\t\t\t\t\t\t\t\t\t\t\t\tloading=\"lazy\"\r\n\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t\t<AvatarFallback>{artist.name}</AvatarFallback>\r\n\t\t\t\t\t\t\t\t\t\t</Avatar>\r\n\t\t\t\t\t\t\t\t\t\t<h3 className=\"font-bold text-lg my-auto mx-auto\">{artist.name}</h3>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t<div className=\"grid grid-cols-3 col-span-3 row-span-2 gap-2 [&>div]:bg-gray-700 [&>div]:text-lg\">\r\n\t\t\t\t\t\t\t\t\t\t<div className=\"row-start-1 flex flex-col rounded-sm p-1\">\r\n\t\t\t\t\t\t\t\t\t\t\t<span className=\"mx-auto\">Debut</span>\r\n\t\t\t\t\t\t\t\t\t\t\t<span className=\"mx-auto\">{artist.debut}</span>\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t<div className=\"row-start-1 flex flex-col rounded-sm p-1\">\r\n\t\t\t\t\t\t\t\t\t\t\t<span className=\"mx-auto\">Popularity</span>\r\n\t\t\t\t\t\t\t\t\t\t\t<span className=\"mx-auto\">#{artist.popularity}</span>\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t<div className=\"row-start-1 flex flex-col rounded-sm p-1\">\r\n\t\t\t\t\t\t\t\t\t\t\t<span className=\"mx-auto\">Members</span>\r\n\t\t\t\t\t\t\t\t\t\t\t<span className=\"mx-auto\">{artist.members}</span>\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t<div className=\"row-start-2 col-start-2 flex flex-col rounded-sm p-1\">\r\n\t\t\t\t\t\t\t\t\t\t\t<span className=\"mx-auto\">Country</span>\r\n\t\t\t\t\t\t\t\t\t\t\t<span className=\"mx-auto\">{artist.country}</span>\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t<div className=\"row-start-2 col-start-3 flex flex-col rounded-sm p-1\">\r\n\t\t\t\t\t\t\t\t\t\t\t<span className=\"mx-auto\">Gender</span>\r\n\t\t\t\t\t\t\t\t\t\t\t<span className=\"mx-auto\">{artist.gender}</span>\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</Card>\r\n\t\t\t\t\t\t\t))\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t</div>\r\n\t\t\t) : artists?.length === 0 ? (\r\n\t\t\t\t<p className=\"text-center text-muted-foreground\">No artists found matching your criteria</p>\r\n\t\t\t) : (\r\n\t\t\t\t<p className=\"text-center text-muted-foreground\">\r\n\t\t\t\t\tEnter the information from your game to find possible artists\r\n\t\t\t\t</p>\r\n\t\t\t)}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\n",
    "theme-provider.tsx": "\"use client\"\r\nimport { ThemeProvider as NextThemesProvider } from \"next-themes\"\r\nimport { ThemeProviderProps } from \"next-themes/dist/types\"\r\n\r\nexport function ThemeProvider({ children, ...props }: ThemeProviderProps) {\r\n  return <NextThemesProvider {...props}>{children}</NextThemesProvider>\r\n}",
    "theme-switcher.tsx": "\"use client\"\r\n\r\nimport { useState } from \"react\"\r\nimport { useTheme } from \"next-themes\"\r\nimport { Moon, Sun } from \"lucide-react\"\r\n\r\nexport function ThemeSwitcher() {\r\n  const { theme, setTheme } = useTheme()\r\n\r\n  return (\r\n    <div className=\"fixed bottom-4 right-4\">\r\n      <button\r\n        onClick={() => setTheme(theme === \"dark\" ? \"light\" : \"dark\")}\r\n        className=\"w-10 h-10 bg-primary text-primary-foreground rounded-full flex items-center justify-center shadow-lg hover:bg-primary/90 transition-colors\"\r\n      >\r\n        {theme === \"dark\" ? <Sun size={20} /> : <Moon size={20} />}\r\n      </button>\r\n    </div>\r\n  )\r\n}\r\n\r\n"
  },
  "hooks": {
    "use-toast.ts": "'use client';\r\n\r\n// Inspired by react-hot-toast library\r\nimport * as React from 'react';\r\n\r\nimport type { ToastActionElement, ToastProps } from '@/components/ui/toast';\r\n\r\nconst TOAST_LIMIT = 1;\r\nconst TOAST_REMOVE_DELAY = 1000000;\r\n\r\ntype ToasterToast = ToastProps & {\r\n  id: string;\r\n  title?: React.ReactNode;\r\n  description?: React.ReactNode;\r\n  action?: ToastActionElement;\r\n};\r\n\r\nconst actionTypes = {\r\n  ADD_TOAST: 'ADD_TOAST',\r\n  UPDATE_TOAST: 'UPDATE_TOAST',\r\n  DISMISS_TOAST: 'DISMISS_TOAST',\r\n  REMOVE_TOAST: 'REMOVE_TOAST',\r\n} as const;\r\n\r\nlet count = 0;\r\n\r\nfunction genId() {\r\n  count = (count + 1) % Number.MAX_SAFE_INTEGER;\r\n  return count.toString();\r\n}\r\n\r\ntype ActionType = typeof actionTypes;\r\n\r\ntype Action =\r\n  | {\r\n      type: ActionType['ADD_TOAST'];\r\n      toast: ToasterToast;\r\n    }\r\n  | {\r\n      type: ActionType['UPDATE_TOAST'];\r\n      toast: Partial<ToasterToast>;\r\n    }\r\n  | {\r\n      type: ActionType['DISMISS_TOAST'];\r\n      toastId?: ToasterToast['id'];\r\n    }\r\n  | {\r\n      type: ActionType['REMOVE_TOAST'];\r\n      toastId?: ToasterToast['id'];\r\n    };\r\n\r\ninterface State {\r\n  toasts: ToasterToast[];\r\n}\r\n\r\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>();\r\n\r\nconst addToRemoveQueue = (toastId: string) => {\r\n  if (toastTimeouts.has(toastId)) {\r\n    return;\r\n  }\r\n\r\n  const timeout = setTimeout(() => {\r\n    toastTimeouts.delete(toastId);\r\n    dispatch({\r\n      type: 'REMOVE_TOAST',\r\n      toastId: toastId,\r\n    });\r\n  }, TOAST_REMOVE_DELAY);\r\n\r\n  toastTimeouts.set(toastId, timeout);\r\n};\r\n\r\nexport const reducer = (state: State, action: Action): State => {\r\n  switch (action.type) {\r\n    case 'ADD_TOAST':\r\n      return {\r\n        ...state,\r\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\r\n      };\r\n\r\n    case 'UPDATE_TOAST':\r\n      return {\r\n        ...state,\r\n        toasts: state.toasts.map((t) =>\r\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\r\n        ),\r\n      };\r\n\r\n    case 'DISMISS_TOAST': {\r\n      const { toastId } = action;\r\n\r\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\r\n      // but I'll keep it here for simplicity\r\n      if (toastId) {\r\n        addToRemoveQueue(toastId);\r\n      } else {\r\n        state.toasts.forEach((toast) => {\r\n          addToRemoveQueue(toast.id);\r\n        });\r\n      }\r\n\r\n      return {\r\n        ...state,\r\n        toasts: state.toasts.map((t) =>\r\n          t.id === toastId || toastId === undefined\r\n            ? {\r\n                ...t,\r\n                open: false,\r\n              }\r\n            : t\r\n        ),\r\n      };\r\n    }\r\n    case 'REMOVE_TOAST':\r\n      if (action.toastId === undefined) {\r\n        return {\r\n          ...state,\r\n          toasts: [],\r\n        };\r\n      }\r\n      return {\r\n        ...state,\r\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\r\n      };\r\n  }\r\n};\r\n\r\nconst listeners: Array<(state: State) => void> = [];\r\n\r\nlet memoryState: State = { toasts: [] };\r\n\r\nfunction dispatch(action: Action) {\r\n  memoryState = reducer(memoryState, action);\r\n  listeners.forEach((listener) => {\r\n    listener(memoryState);\r\n  });\r\n}\r\n\r\ntype Toast = Omit<ToasterToast, 'id'>;\r\n\r\nfunction toast({ ...props }: Toast) {\r\n  const id = genId();\r\n\r\n  const update = (props: ToasterToast) =>\r\n    dispatch({\r\n      type: 'UPDATE_TOAST',\r\n      toast: { ...props, id },\r\n    });\r\n  const dismiss = () => dispatch({ type: 'DISMISS_TOAST', toastId: id });\r\n\r\n  dispatch({\r\n    type: 'ADD_TOAST',\r\n    toast: {\r\n      ...props,\r\n      id,\r\n      open: true,\r\n      onOpenChange: (open) => {\r\n        if (!open) dismiss();\r\n      },\r\n    },\r\n  });\r\n\r\n  return {\r\n    id: id,\r\n    dismiss,\r\n    update,\r\n  };\r\n}\r\n\r\nfunction useToast() {\r\n  const [state, setState] = React.useState<State>(memoryState);\r\n\r\n  React.useEffect(() => {\r\n    listeners.push(setState);\r\n    return () => {\r\n      const index = listeners.indexOf(setState);\r\n      if (index > -1) {\r\n        listeners.splice(index, 1);\r\n      }\r\n    };\r\n  }, [state]);\r\n\r\n  return {\r\n    ...state,\r\n    toast,\r\n    dismiss: (toastId?: string) => dispatch({ type: 'DISMISS_TOAST', toastId }),\r\n  };\r\n}\r\n\r\nexport { useToast, toast };\r\n",
    "useArtistSearch.ts": "// useArtistSearch.ts\r\nimport { useState, useCallback } from \"react\"\r\nimport { useQuery } from \"@tanstack/react-query\"\r\nimport { supabase, type Artist, type Genre } from \"@/lib/supabase\"\r\nimport { getCountryContinent } from \"@/app/continents\"\r\n\r\ntype Filters = {\r\n\tdebut: string\r\n\tgender: string\r\n\tmembers: string\r\n\tcountry: string\r\n\tpopularity: string\r\n\tdebutMin?: string\r\n\tdebutMax?: string\r\n\tpopularityMin?: string\r\n\tpopularityMax?: string\r\n}\r\n\r\ntype MatchStatus = {\r\n\tdebut: string\r\n\tgender: string\r\n\tmembers: string\r\n\tcountry: string\r\n\tpopularity: string\r\n}\r\n\r\nexport function useArtistSearch(initialGenre: Genre) {\r\n\tconst [selectedGenre, setSelectedGenre] = useState<Genre>(initialGenre)\r\n\tconst [filters, setFilters] = useState<Filters>({\r\n\t\tdebut: \"\",\r\n\t\tgender: \"\",\r\n\t\tmembers: \"\",\r\n\t\tcountry: \"\",\r\n\t\tpopularity: \"\",\r\n\t})\r\n\r\n\tconst [matchStatus, setMatchStatus] = useState<MatchStatus>({\r\n\t\tdebut: \"none\",\r\n\t\tgender: \"none\",\r\n\t\tmembers: \"none\",\r\n\t\tcountry: \"none\",\r\n\t\tpopularity: \"none\",\r\n\t})\r\n\r\n\tconst buildQuery = useCallback(\r\n\t\t(genre: Genre, filters: Filters, matchStatus: MatchStatus) => {\r\n\t\t\tlet query = supabase\r\n\t\t\t\t.from(genre)\r\n\t\t\t\t.select(\"id, name, country, debut, gender, members, popularity, imageUrl\")\r\n\r\n\t\t\t// --- Filtro para \"debut\" ---\r\n\t\t\tif (filters.debutMin && filters.debutMax) {\r\n\t\t\t\tquery = query\r\n\t\t\t\t\t.gte(\"debut\", Number.parseInt(filters.debutMin))\r\n\t\t\t\t\t.lte(\"debut\", Number.parseInt(filters.debutMax))\r\n\t\t\t} else if (filters.debut) {\r\n\t\t\t\tconst debutYear = Number.parseInt(filters.debut)\r\n\t\t\t\tif (!isNaN(debutYear) && matchStatus.debut !== \"none\") {\r\n\t\t\t\t\tif (matchStatus.debut === \"correct\") {\r\n\t\t\t\t\t\tquery = query.eq(\"debut\", debutYear)\r\n\t\t\t\t\t} else if (matchStatus.debut === \"before\") {\r\n\t\t\t\t\t\tquery = query.lt(\"debut\", debutYear)\r\n\t\t\t\t\t} else if (matchStatus.debut === \"after\") {\r\n\t\t\t\t\t\tquery = query.gt(\"debut\", debutYear)\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// --- Filtro para \"country\" ---\r\n\t\t\tif (filters.country) {\r\n\t\t\t\tif (matchStatus.country === \"correct\") {\r\n\t\t\t\t\tquery = query.eq(\"country\", filters.country)\r\n\t\t\t\t} else if (matchStatus.country === \"continent\") {\r\n\t\t\t\t\tconst continentCountries = getCountryContinent(filters.country)\r\n\t\t\t\t\tif (continentCountries.length > 0) {\r\n\t\t\t\t\t\tquery = query.in(\"country\", continentCountries)\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// --- Filtro para \"gender\" ---\r\n\t\t\tif (filters.gender) {\r\n\t\t\t\tquery = query.eq(\"gender\", filters.gender)\r\n\t\t\t}\r\n\r\n\t\t\t// --- Filtro para \"members\" ---\r\n\t\t\tif (filters.members) {\r\n\t\t\t\tquery = query.eq(\"members\", filters.members)\r\n\t\t\t}\r\n\r\n\t\t\t// --- Filtro para \"popularity\" ---\r\n\t\t\tif (filters.popularityMin && filters.popularityMax) {\r\n\t\t\t\tquery = query\r\n\t\t\t\t\t.gte(\"popularity\", Number.parseInt(filters.popularityMin))\r\n\t\t\t\t\t.lte(\"popularity\", Number.parseInt(filters.popularityMax))\r\n\t\t\t} else if (filters.popularity) {\r\n\t\t\t\tconst popularityValue = Number.parseInt(filters.popularity)\r\n\t\t\t\tif (!isNaN(popularityValue) && matchStatus.popularity !== \"none\") {\r\n\t\t\t\t\tif (matchStatus.popularity === \"correct\") {\r\n\t\t\t\t\t\tquery = query.eq(\"popularity\", popularityValue)\r\n\t\t\t\t\t} else if (matchStatus.popularity === \"lower\") {\r\n\t\t\t\t\t\tquery = query.lt(\"popularity\", popularityValue)\r\n\t\t\t\t\t} else if (matchStatus.popularity === \"higher\") {\r\n\t\t\t\t\t\tquery = query.gt(\"popularity\", popularityValue)\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn query\r\n\t\t},\r\n\t\t[]\r\n\t)\r\n\r\n\tconst {\r\n\t\tdata: artists,\r\n\t\tisLoading,\r\n\t\trefetch,\r\n\t} = useQuery<Artist[]>({\r\n\t\tqueryKey: [\"artists\", selectedGenre, filters, matchStatus],\r\n\t\tqueryFn: async () => {\r\n\t\t\ttry {\r\n\t\t\t\tconst query = buildQuery(selectedGenre, filters, matchStatus)\r\n\t\t\t\tconst { data, error } = await query\r\n\t\t\t\tif (error) throw error\r\n\r\n\t\t\t\t// Si no hay datos, devolvemos un array vacío\r\n\t\t\t\tif (!data) return []\r\n\r\n\t\t\t\treturn data.map((artist) => ({ ...artist, genre: selectedGenre }))\r\n\t\t\t} catch (error) {\r\n\t\t\t\tconsole.error(\"Error fetching artists:\", error)\r\n\t\t\t\treturn []\r\n\t\t\t}\r\n\t\t},\r\n\t\t// Ejecutamos la query si hay algún valor en los filtros y un género seleccionado\r\n\t\tenabled: !!selectedGenre && Object.values(filters).some((value) => value !== \"\"),\r\n\t})\r\n\r\n\tconst clearSearch = useCallback(() => {\r\n\t\tsetFilters({\r\n\t\t\tcountry: \"\",\r\n\t\t\tdebut: \"\",\r\n\t\t\tgender: \"\",\r\n\t\t\tmembers: \"\",\r\n\t\t\tpopularity: \"\",\r\n\t\t\tdebutMin: \"\",\r\n\t\t\tdebutMax: \"\",\r\n\t\t\tpopularityMin: \"\",\r\n\t\t\tpopularityMax: \"\",\r\n\t\t})\r\n\t\tsetMatchStatus({\r\n\t\t\tcountry: \"none\",\r\n\t\t\tdebut: \"none\",\r\n\t\t\tgender: \"none\",\r\n\t\t\tmembers: \"none\",\r\n\t\t\tpopularity: \"none\",\r\n\t\t})\r\n\t\trefetch()\r\n\t}, [refetch])\r\n\r\n\treturn {\r\n\t\tfilters,\r\n\t\tsetFilters,\r\n\t\tmatchStatus,\r\n\t\tsetMatchStatus,\r\n\t\tartists,\r\n\t\tisLoading,\r\n\t\tclearSearch,\r\n\t\tsetSelectedGenre,\r\n\t}\r\n}",
    "useCountrySearch.ts": "import { useState, useEffect } from \"react\"\r\nimport { useQuery } from \"@tanstack/react-query\"\r\nimport { supabase } from \"@/lib/supabase\"\r\n\r\nexport function useCountrySearch() {\r\n  const [countrySearchTerm, setCountrySearchTerm] = useState(\"\")\r\n\r\n  const { data: distinctCountries } = useQuery({\r\n    queryKey: [\"countries\"],\r\n    queryFn: async () => {\r\n      const { data, error } = await supabase.rpc(\"get_distinct_countries\")\r\n      if (error) throw error\r\n      return (data as { country: string }[]).filter((item) => item.country && item.country.trim() !== \"\")\r\n    },\r\n  })\r\n\r\n  useEffect(() => {\r\n    const handleClickOutside = () => {\r\n      setCountrySearchTerm(\"\")\r\n    }\r\n    document.addEventListener(\"click\", handleClickOutside)\r\n    return () => {\r\n      document.removeEventListener(\"click\", handleClickOutside)\r\n    }\r\n  }, [])\r\n\r\n  return { distinctCountries, countrySearchTerm, setCountrySearchTerm }\r\n}\r\n\r\n"
  }
}