{
  "app": {
    "page.tsx": "'use client';\n\nimport { useState } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { supabase, type Artist, type Genre, genres } from '@/lib/supabase';\nimport { Card } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Button } from '@/components/ui/button';\nimport { ArrowDownIcon, ArrowUpIcon, Music2Icon } from 'lucide-react';\nimport { QueryClient, QueryClientProvider } from \"@tanstack/react-query\";\n\nexport default function Home() {\n  const [selectedGenre, setSelectedGenre] = useState<Genre>('POP');\n  const [guesses, setGuesses] = useState<{\n    name: string;\n    country: string;\n    debut: string;\n    gender: string;\n    members: string;\n    popularity: string;\n  }>({\n    name: '',\n    country: '',\n    debut: '',\n    gender: '',\n    members: '',\n    popularity: '',\n  });\n\n  const { data: artist } = useQuery<Artist>({\n    queryKey: ['artist', selectedGenre],\n    queryFn: async () => {\n      const { data, error } = await supabase\n        .from(selectedGenre)\n        .select('*')\n        .limit(1)\n        .single();\n\n      if (error) throw error;\n      return data;\n    },\n  });\n\n  const checkGuess = (field: keyof typeof guesses, value: string) => {\n    if (!artist) return null;\n\n    if (field === 'debut') {\n      const guessNum = parseInt(value);\n      const actual = artist[field];\n      if (guessNum === actual) return 'correct';\n      if (Math.abs(guessNum - actual) <= 5) return guessNum < actual ? 'higher' : 'lower';\n      return 'wrong';\n    }\n\n    if (field === 'popularity') {\n      const guessNum = parseInt(value);\n      const actual = artist[field];\n      if (guessNum === actual) return 'correct';\n      if (Math.abs(guessNum - actual) <= 10) return guessNum < actual ? 'higher' : 'lower';\n      return 'wrong';\n    }\n\n    return value.toLowerCase() === String(artist[field]).toLowerCase() ? 'correct' : 'wrong';\n  };\n\n  const getGuessStyle = (field: keyof typeof guesses) => {\n    const guess = guesses[field];\n    if (!guess) return '';\n\n    const result = checkGuess(field, guess);\n    if (result === 'correct') return 'bg-green-100 border-green-500';\n    if (result === 'higher') return 'bg-yellow-100 border-yellow-500';\n    if (result === 'lower') return 'bg-yellow-100 border-yellow-500';\n    return 'bg-red-50 border-red-300';\n  };\n\n  const getGuessIcon = (field: keyof typeof guesses) => {\n    const guess = guesses[field];\n    if (!guess) return null;\n\n    const result = checkGuess(field, guess);\n    if (result === 'higher') return <ArrowUpIcon className=\"w-4 h-4 text-yellow-600\" />;\n    if (result === 'lower') return <ArrowDownIcon className=\"w-4 h-4 text-yellow-600\" />;\n    return null;\n  };\n\n  const queryClient = new QueryClient();\n\n  return (\n    <QueryClientProvider client={queryClient}>\n    <div className=\"min-h-screen bg-gradient-to-b from-gray-900 to-gray-800 text-white p-8\">\n      <div className=\"max-w-4xl mx-auto\">\n        <div className=\"flex items-center justify-center mb-8\">\n          <Music2Icon className=\"w-8 h-8 mr-2\" />\n          <h1 className=\"text-3xl font-bold\">Music Artist Guessing Game</h1>\n        </div>\n\n        <div className=\"mb-8\">\n          <Select value={selectedGenre} onValueChange={(value) => setSelectedGenre(value as Genre)}>\n            <SelectTrigger className=\"w-[200px]\">\n              <SelectValue placeholder=\"Select genre\" />\n            </SelectTrigger>\n            <SelectContent>\n              {genres.map((genre) => (\n                <SelectItem key={genre} value={genre}>\n                  {genre}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n          <Card className=\"p-4 bg-gray-800 border-gray-700\">\n            <label className=\"block text-sm font-medium mb-2\">Artist Name</label>\n            <Input\n              value={guesses.name}\n              onChange={(e) => setGuesses({ ...guesses, name: e.target.value })}\n              className={`${getGuessStyle('name')} bg-gray-700 border-gray-600`}\n            />\n            {getGuessIcon('name')}\n          </Card>\n\n          <Card className=\"p-4 bg-gray-800 border-gray-700\">\n            <label className=\"block text-sm font-medium mb-2\">Country</label>\n            <Input\n              value={guesses.country}\n              onChange={(e) => setGuesses({ ...guesses, country: e.target.value })}\n              className={`${getGuessStyle('country')} bg-gray-700 border-gray-600`}\n            />\n          </Card>\n\n          <Card className=\"p-4 bg-gray-800 border-gray-700\">\n            <label className=\"block text-sm font-medium mb-2\">Debut Year</label>\n            <Input\n              type=\"number\"\n              value={guesses.debut}\n              onChange={(e) => setGuesses({ ...guesses, debut: e.target.value })}\n              className={`${getGuessStyle('debut')} bg-gray-700 border-gray-600`}\n            />\n            {getGuessIcon('debut')}\n          </Card>\n\n          <Card className=\"p-4 bg-gray-800 border-gray-700\">\n            <label className=\"block text-sm font-medium mb-2\">Gender</label>\n            <Input\n              value={guesses.gender}\n              onChange={(e) => setGuesses({ ...guesses, gender: e.target.value })}\n              className={`${getGuessStyle('gender')} bg-gray-700 border-gray-600`}\n            />\n          </Card>\n\n          <Card className=\"p-4 bg-gray-800 border-gray-700\">\n            <label className=\"block text-sm font-medium mb-2\">Members</label>\n            <Input\n              value={guesses.members}\n              onChange={(e) => setGuesses({ ...guesses, members: e.target.value })}\n              className={`${getGuessStyle('members')} bg-gray-700 border-gray-600`}\n            />\n          </Card>\n\n          <Card className=\"p-4 bg-gray-800 border-gray-700\">\n            <label className=\"block text-sm font-medium mb-2\">Popularity</label>\n            <Input\n              type=\"number\"\n              value={guesses.popularity}\n              onChange={(e) => setGuesses({ ...guesses, popularity: e.target.value })}\n              className={`${getGuessStyle('popularity')} bg-gray-700 border-gray-600`}\n            />\n            {getGuessIcon('popularity')}\n          </Card>\n        </div>\n\n        <div className=\"mt-8 text-center\">\n          <Button\n            onClick={() => {\n              setGuesses({\n                name: '',\n                country: '',\n                debut: '',\n                gender: '',\n                members: '',\n                popularity: '',\n              });\n            }}\n            variant=\"outline\"\n            className=\"bg-gray-700 hover:bg-gray-600 text-white\"\n          >\n            Reset Guesses\n          </Button>\n        </div>\n      </div>\n    </div>\n          </QueryClientProvider>\n  );\n}"
  }
}